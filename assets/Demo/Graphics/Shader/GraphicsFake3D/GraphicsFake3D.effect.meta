{
  "ver": "1.0.27",
  "uuid": "ee30b057-b6bf-4802-9eb0-4aac72f31ac0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying float v_dist;\nuniform vec2 lightPos;\nuniform float lineWidth;\nvoid main () {\n  vec4 o = v_color;\n  float maxDist = lineWidth / 4.;\n  float D = abs(v_dist) * 2.0 - 1.0;\n  D *= -maxDist;\n  float aastep = fwidth(D);\n  float aaMask = smoothstep(-aastep, aastep, abs(D) - 1.0);\n  vec2 delta = vec2(dFdx(D), dFdy(D));\n  float brightNess = dot(normalize(delta), normalize(-lightPos));\n  brightNess = clamp(brightNess, 0.15, 0.85);\n  float w = maxDist / 2.;\n  float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);\n  float insideMask = smoothstep(-aastep, aastep, D);\n  vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;\n  color *= vec3(1., 213./255., 0.);\n  float finalMask = (edgeMask + insideMask);\n  gl_FragColor = vec4(color * finalMask, finalMask);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin float v_dist;\nuniform UARGS {\n  vec2 lightPos;\n  float lineWidth;\n};\nvoid main () {\n  vec4 o = v_color;\n  float maxDist = lineWidth / 4.;\n  float D = abs(v_dist) * 2.0 - 1.0;\n  D *= -maxDist;\n  float aastep = fwidth(D);\n  float aaMask = smoothstep(-aastep, aastep, abs(D) - 1.0);\n  vec2 delta = vec2(dFdx(D), dFdy(D));\n  float brightNess = dot(normalize(delta), normalize(-lightPos));\n  brightNess = clamp(brightNess, 0.15, 0.85);\n  float w = maxDist / 2.;\n  float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);\n  float insideMask = smoothstep(-aastep, aastep, D);\n  vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;\n  color *= vec3(1., 213./255., 0.);\n  float finalMask = (edgeMask + insideMask);\n  gl_FragColor = vec4(color * finalMask, finalMask);\n}"
      }
    }
  ],
  "subMetas": {}
}