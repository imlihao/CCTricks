{
  "ver": "1.0.27",
  "uuid": "86810400-7956-4166-b487-0a9d781d50b0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute float a_index;\nvarying float v_index;\nvarying vec4 v_lineFlags;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_index = a_index;\n  v_lineFlags.x = floor(a_index * 0.5);\n  v_lineFlags.y = floor((a_index + 1.) * 0.5);\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\n  varying float v_index;\n  varying vec4 v_lineFlags;\n  varying float v_dist;\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main () {\n    #if CC_SUPPORT_standard_derivatives\n      float aa = fwidth(v_dist);\n    #else\n      float aa = 0.05;\n    #endif\n    vec2 ff = fract(v_lineFlags.xy);\n    float green = min(ff.x, ff.y);\n    green = 0.3 + min(green, 0.7);\n    gl_FragColor = vec4(0., green, 0., 1.0);\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin float a_index;\nout float v_index;\nout vec4 v_lineFlags;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_index = a_index;\n  v_lineFlags.x = floor(a_index * 0.5);\n  v_lineFlags.y = floor((a_index + 1.) * 0.5);\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in float v_index;\n  in vec4 v_lineFlags;\n  in float v_dist;\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main () {\n    #if CC_SUPPORT_standard_derivatives\n      float aa = fwidth(v_dist);\n    #else\n      float aa = 0.05;\n    #endif\n    vec2 ff = fract(v_lineFlags.xy);\n    float green = min(ff.x, ff.y);\n    green = 0.3 + min(green, 0.7);\n    gl_FragColor = vec4(0., green, 0., 1.0);\n  }"
      }
    }
  ],
  "subMetas": {}
}