{
  "ver": "1.0.27",
  "uuid": "c842b047-a0e6-4c6d-af55-fa7719d4f8cc",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  vec2 h2;\n  h2.x = texture2D(texture, vec2(part_id * 2. / grids, 0.5)).r;\n  h2.y = texture2D(texture, vec2((part_id * 2. + 2.) / grids, 0.5)).r;\n  h2 = h2 * h2 * h2 + 0.01;\n  float f = fract(angle * grids);\n  float cubic = f * f * (3.0 - 2.0 * f);\n  float h = mix(h2.x, h2.y, cubic);\n  float blur = 4. / 720.;\n  vec3 hsl = vec3(fract(angle - cc_time.x * 0.5), 1.0, 1.0);\n  vec3 color = hsv2rgb_smooth(hsl);\n  float ext = h * 0.5;\n  float thickness = blur;\n  float mask = smoothstep(thickness + blur, thickness, abs(dist - ext - 0.5));\n  color *= mask;\n  gl_FragColor = vec4(color, mask);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  vec2 h2;\n  h2.x = texture(texture, vec2(part_id * 2. / grids, 0.5)).r;\n  h2.y = texture(texture, vec2((part_id * 2. + 2.) / grids, 0.5)).r;\n  h2 = h2 * h2 * h2 + 0.01;\n  float f = fract(angle * grids);\n  float cubic = f * f * (3.0 - 2.0 * f);\n  float h = mix(h2.x, h2.y, cubic);\n  float blur = 4. / 720.;\n  vec3 hsl = vec3(fract(angle - cc_time.x * 0.5), 1.0, 1.0);\n  vec3 color = hsv2rgb_smooth(hsl);\n  float ext = h * 0.5;\n  float thickness = blur;\n  float mask = smoothstep(thickness + blur, thickness, abs(dist - ext - 0.5));\n  color *= mask;\n  gl_FragColor = vec4(color, mask);\n}"
      }
    }
  ],
  "subMetas": {}
}