{
  "ver": "1.0.27",
  "uuid": "64528db1-50c0-4730-a10e-dbb95801054b",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 grids;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture2D(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  h = max(h, 0.01);\n  float mask = step(uv.y, h);\n  mask *= step(0., uv.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= smoothstep(0.5, 0.35, abs(guv.x - 0.5));\n  h = Remap(0., 0.5, 0.7, 0.08, h);\n  vec3 hsl = vec3(h, 1.0, 1.0);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n  vec2 grids;\n};\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  h = max(h, 0.01);\n  float mask = step(uv.y, h);\n  mask *= step(0., uv.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= smoothstep(0.5, 0.35, abs(guv.x - 0.5));\n  h = Remap(0., 0.5, 0.7, 0.08, h);\n  vec3 hsl = vec3(h, 1.0, 1.0);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
      }
    }
  ],
  "subMetas": {}
}