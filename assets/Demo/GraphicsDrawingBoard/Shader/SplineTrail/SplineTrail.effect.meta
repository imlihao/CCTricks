{
  "ver": "1.0.27",
  "uuid": "82b16941-7e29-4937-9b70-37d531b5e944",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\n  precision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n  attribute vec3 a_position;\n  attribute vec4 a_color;\n  varying vec4 v_color;\n  attribute float a_width;\n  varying float v_width;\n  attribute float a_dist;\n  varying float v_dist;\n  void main () {\n    vec4 pos = vec4(a_position, 1);\n#if USE_WORLD_POS\n    pos = cc_matViewProj * pos;\n#else\n    pos = cc_matViewProj * cc_matWorld * pos;\n#endif\n    v_width = a_width;\n    v_dist = a_dist;\n    v_color = a_color;\n    gl_Position = pos;\n  }",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  varying float v_width;\n  varying float v_dist;\n  uniform sampler2D texture;\n  uniform vec4 size;\nuniform vec2 uv_shift;\n  void main () {\n#if USE_TEXTURE\n    vec2 uv = fract(vec2(v_dist, v_width) * size.zw);\n  #if UV_CROSS_SEGMENT\n    uv.x = fract(v_dist / size.y);\n  #endif\n  #if UV_SHIFT_BY_TIME\n    uv = fract(uv_shift * -cc_time.x + uv);\n  #endif\n    float fadeDist = 200.;\n    float alpha = clamp(v_dist / fadeDist, 0.01, 1.);\n    float scale_inv = 1./alpha;\n    uv.y = uv.y * scale_inv + (1.0 - scale_inv) * 0.5;\n    vec4 color = texture2D(texture, uv);\n    color.a *= alpha;\n#else\n    vec4 color = vec4(1., 0., 1., 1.);\n#endif\n    gl_FragColor = color;\n  }"
      },
      "glsl3": {
        "vert": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec3 a_position;\n  in vec4 a_color;\n  out vec4 v_color;\n  in float a_width;\n  out float v_width;\n  in float a_dist;\n  out float v_dist;\n  void main () {\n    vec4 pos = vec4(a_position, 1);\n#if USE_WORLD_POS\n    pos = cc_matViewProj * pos;\n#else\n    pos = cc_matViewProj * cc_matWorld * pos;\n#endif\n    v_width = a_width;\n    v_dist = a_dist;\n    v_color = a_color;\n    gl_Position = pos;\n  }",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  in float v_width;\n  in float v_dist;\n  uniform sampler2D texture;\n  uniform UARGS {\n    vec4 size;\n    vec4 runtime_color;\n    vec2 uv_shift;\n  };\n  void main () {\n#if USE_TEXTURE\n    vec2 uv = fract(vec2(v_dist, v_width) * size.zw);\n  #if UV_CROSS_SEGMENT\n    uv.x = fract(v_dist / size.y);\n  #endif\n  #if UV_SHIFT_BY_TIME\n    uv = fract(uv_shift * -cc_time.x + uv);\n  #endif\n    float fadeDist = 200.;\n    float alpha = clamp(v_dist / fadeDist, 0.01, 1.);\n    float scale_inv = 1./alpha;\n    uv.y = uv.y * scale_inv + (1.0 - scale_inv) * 0.5;\n    vec4 color = texture2D(texture, uv);\n    color.a *= alpha;\n#else\n    vec4 color = vec4(1., 0., 1., 1.);\n#endif\n    gl_FragColor = color;\n  }"
      }
    }
  ],
  "subMetas": {}
}