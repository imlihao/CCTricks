{
  "ver": "1.0.27",
  "uuid": "eb5e2e7b-e42c-4ab8-8c55-65f8272ce99d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  #extension GL_OES_standard_derivatives: enable\n  precision highp float;\n  varying vec4 v_color;\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform vec2 texSize;\nuniform vec2 texStep;\nuniform float edge;\n  float random (in vec2 st) {\n      return fract(sin(dot(st.xy,\n                          vec2(12.9898,78.233)))\n                  * 43758.5453123);\n  }\n  float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n  }\n  float GetD_naive(vec2 st) {\n    float D = texture2D(texture, st).r;\n    D -= 0.50196;\n    return D;\n  }\n  float GetD_dual8(vec2 st) {\n    float texw = texSize.x;\n    float texh = texSize.y;\n    vec2 uv = st.xy * vec2(texw, texh);\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    float onestepu = texStep.x;\n    float onestepv = texStep.y;\n    vec2 st00 = (uv00  + vec2(0.5)) * vec2(onestepu, onestepv);\n    vec4 rawtex00 = texture2D(texture, st00);\n    vec4 rawtex10 = texture2D(texture, st00 + vec2(onestepu, 0.0));\n    vec4 rawtex01 = texture2D(texture, st00 + vec2(0.0, onestepv));\n    vec4 rawtex11 = texture2D(texture, st00 + vec2(onestepu, onestepv));\n    rawtex00.r = rawtex00.r + rawtex00.g / 256.;;\n    rawtex10.r = rawtex10.r + rawtex10.g / 256.;;\n    rawtex01.r = rawtex01.r + rawtex01.g / 256.;;\n    rawtex11.r = rawtex11.r + rawtex11.g / 256.;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r) - 0.50196;\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r) - 0.50196;\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    float D = mix(D0_1.x, D0_1.y, uvlerp.x);\n    return D;\n  }\n  float GetD(vec2 st) {\n    float texw = texSize.x;\n    float texh = texSize.y;\n    vec2 uv = st.xy * vec2(texw, texh);\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    float onestepu = texStep.x;\n    float onestepv = texStep.y;\n    vec2 st00 = (uv00  + vec2(0.5)) * vec2(onestepu, onestepv);\n    vec4 rawtex00 = texture2D(texture, st00);\n    vec4 rawtex10 = texture2D(texture, st00 + vec2(onestepu, 0.0));\n    vec4 rawtex01 = texture2D(texture, st00 + vec2(0.0, onestepv));\n    vec4 rawtex11 = texture2D(texture, st00 + vec2(onestepu, onestepv));\n    vec2 D00_10 = 16.0*(vec2(rawtex00.r, rawtex10.r)-0.50196);\n    vec2 D01_11 = 16.0*(vec2(rawtex01.r, rawtex11.r)-0.50196);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    float D = mix(D0_1.x, D0_1.y, uvlerp.x);\n    return D;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main( void )\n  {\n    vec2 st = v_uv0.xy;\n    float D = GetD_dual8(st);\n    float aastep = length(vec2(dFdx(D), dFdy(D)));\n    aastep = max(aastep, 1e-10);\n    float mask = smoothstep(aastep, -aastep, abs(D)-edge);\n    vec3 color = vec3(0., 1., 0.);\n    gl_FragColor = vec4(color, mask);\n    return;\n    gl_FragColor = vec4(vec3(1.0), color.r);\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  #extension GL_OES_standard_derivatives: enable\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec4 v_color;\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform UARGS {\n    vec2 texSize;\n    vec2 texStep;\n    float edge;\n  };\n  float random (in vec2 st) {\n      return fract(sin(dot(st.xy,\n                          vec2(12.9898,78.233)))\n                  * 43758.5453123);\n  }\n  float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n  }\n  float GetD_naive(vec2 st) {\n    float D = texture2D(texture, st).r;\n    D -= 0.50196;\n    return D;\n  }\n  float GetD_dual8(vec2 st) {\n    float texw = texSize.x;\n    float texh = texSize.y;\n    vec2 uv = st.xy * vec2(texw, texh);\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    float onestepu = texStep.x;\n    float onestepv = texStep.y;\n    vec2 st00 = (uv00  + vec2(0.5)) * vec2(onestepu, onestepv);\n    vec4 rawtex00 = texture2D(texture, st00);\n    vec4 rawtex10 = texture2D(texture, st00 + vec2(onestepu, 0.0));\n    vec4 rawtex01 = texture2D(texture, st00 + vec2(0.0, onestepv));\n    vec4 rawtex11 = texture2D(texture, st00 + vec2(onestepu, onestepv));\n    rawtex00.r = rawtex00.r + rawtex00.g / 256.;;\n    rawtex10.r = rawtex10.r + rawtex10.g / 256.;;\n    rawtex01.r = rawtex01.r + rawtex01.g / 256.;;\n    rawtex11.r = rawtex11.r + rawtex11.g / 256.;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r) - 0.50196;\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r) - 0.50196;\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    float D = mix(D0_1.x, D0_1.y, uvlerp.x);\n    return D;\n  }\n  float GetD(vec2 st) {\n    float texw = texSize.x;\n    float texh = texSize.y;\n    vec2 uv = st.xy * vec2(texw, texh);\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    float onestepu = texStep.x;\n    float onestepv = texStep.y;\n    vec2 st00 = (uv00  + vec2(0.5)) * vec2(onestepu, onestepv);\n    vec4 rawtex00 = texture2D(texture, st00);\n    vec4 rawtex10 = texture2D(texture, st00 + vec2(onestepu, 0.0));\n    vec4 rawtex01 = texture2D(texture, st00 + vec2(0.0, onestepv));\n    vec4 rawtex11 = texture2D(texture, st00 + vec2(onestepu, onestepv));\n    vec2 D00_10 = 16.0*(vec2(rawtex00.r, rawtex10.r)-0.50196);\n    vec2 D01_11 = 16.0*(vec2(rawtex01.r, rawtex11.r)-0.50196);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    float D = mix(D0_1.x, D0_1.y, uvlerp.x);\n    return D;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main( void )\n  {\n    vec2 st = v_uv0.xy;\n    float D = GetD_dual8(st);\n    float aastep = length(vec2(dFdx(D), dFdy(D)));\n    aastep = max(aastep, 1e-10);\n    float mask = smoothstep(aastep, -aastep, abs(D)-edge);\n    vec3 color = vec3(0., 1., 0.);\n    gl_FragColor = vec4(color, mask);\n    return;\n    gl_FragColor = vec4(vec3(1.0), color.r);\n  }"
      }
    }
  ],
  "subMetas": {}
}