{
  "ver": "1.0.27",
  "uuid": "a42daa18-fbe0-497d-a4a1-c41c403c4bcc",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvec3 Pallete(float t) {\n  vec3 dcOffset = vec3(0.938, 0.328, 0.718);\n  vec3 amp = vec3(0.659, 0.438, 0.328);\n  vec3 freq = vec3(0.388, 0.388, 0.296);\n  vec3 phase = vec3(2.538, 2.478, 0.168);\n  return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  float w = 10.;\n  float mask = 1.0;\n  D = 0.5 - D / w * 0.5;\n  D -= cc_time.x;\n  vec3 color = Pallete(D);\n  gl_FragColor = vec4(color, mask);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvec3 Pallete(float t) {\n  vec3 dcOffset = vec3(0.938, 0.328, 0.718);\n  vec3 amp = vec3(0.659, 0.438, 0.328);\n  vec3 freq = vec3(0.388, 0.388, 0.296);\n  vec3 phase = vec3(2.538, 2.478, 0.168);\n  return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  float w = 10.;\n  float mask = 1.0;\n  D = 0.5 - D / w * 0.5;\n  D -= cc_time.x;\n  vec3 color = Pallete(D);\n  gl_FragColor = vec4(color, mask);\n}"
      }
    }
  ],
  "subMetas": {}
}