{
  "ver": "1.0.27",
  "uuid": "71a59ef7-148c-4741-9fa2-aff150ca015d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_uv0.y = 1.0 - v_uv0.y;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 PP;\nuniform float width;\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n    float d = distance(p, vec2(0., clamp(p.y, o - height * 0.5, o + height * 0.5)));\n    return d;\n}\nmat2 Rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\nmat2 Rotate2d2(float cosine, float sine) {\n    return mat2(cosine, -sine, sine, cosine);\n}\nvoid main()\n{\n    vec2 uv = v_uv0.xy;\n    uv = uv * 2. - 1.;\n    uv.y *= 1280./720.;\n    float height = 0.01;\n    float blur = 4. / 720.;\n    float dist = distance(PP.xy, PP.zw);\n    vec2 mid = (PP.xy + PP.zw) * 0.5;\n    uv -= mid;\n    vec2 cs = (PP.xy - PP.zw) / dist;\n    uv = Rotate2d2(-cs.y, cs.x) * uv;\n    height = dist;\n    float mask = Capsule(uv, 0., width, height, blur);\n    mask = smoothstep(width, width-blur, mask);\n    vec4 col = v_color * mask;\n    gl_FragColor = col;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_uv0.y = 1.0 - v_uv0.y;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n    vec4 PP;\n    float width;\n};\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n    float d = distance(p, vec2(0., clamp(p.y, o - height * 0.5, o + height * 0.5)));\n    return d;\n}\nmat2 Rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\nmat2 Rotate2d2(float cosine, float sine) {\n    return mat2(cosine, -sine, sine, cosine);\n}\nvoid main()\n{\n    vec2 uv = v_uv0.xy;\n    uv = uv * 2. - 1.;\n    uv.y *= 1280./720.;\n    float height = 0.01;\n    float blur = 4. / 720.;\n    float dist = distance(PP.xy, PP.zw);\n    vec2 mid = (PP.xy + PP.zw) * 0.5;\n    uv -= mid;\n    vec2 cs = (PP.xy - PP.zw) / dist;\n    uv = Rotate2d2(-cs.y, cs.x) * uv;\n    height = dist;\n    float mask = Capsule(uv, 0., width, height, blur);\n    mask = smoothstep(width, width-blur, mask);\n    vec4 col = v_color * mask;\n    gl_FragColor = col;\n}"
      }
    }
  ],
  "subMetas": {}
}